// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // Control Logic
    // IF instruction[15] == 1, then C-instruction,
    Not(in=instruction[15], out=notInst);
    //else A-instruction
    // A/M switch
    And(a=instruction[15], b=instruction[12], out=a);
    // ALU control pins
    And(a=instruction[15], b=instruction[11], out=zx);
    And(a=instruction[15], b=instruction[10], out=nx);
    And(a=instruction[15], b=instruction[9], out=zy);
    And(a=instruction[15], b=instruction[8], out=ny);
    And(a=instruction[15], b=instruction[7], out=f);
    And(a=instruction[15], b=instruction[6], out=no);
    // Destination Pins
    And(a=instruction[15], b=instruction[5], out=destA);
    And(a=instruction[15], b=instruction[4], out=destD);
    And(a=instruction[15], b=instruction[3], out=writeM);
    // Jump Pins
    And(a=instruction[15], b=instruction[2], out=j1);
    And(a=instruction[15], b=instruction[1], out=j2);
    And(a=instruction[15], b=instruction[0], out=j3);


    // IF C instruction, take the ALU output into the A-register
    // IF A instruction, take the new A input
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=muxa);

    //CPU REGISTERS
    Or(a=notInst, b=destA, out=loadA);
    ARegister(in=muxa, load=loadA, out=outAreg, out[0..14]=addressM);
    DRegister(in=ALUout, load=destD, out=outDreg);

    // SWITCH BETWEEN A/M INPUT FOR ALU
    Mux16(a=outAreg, b=inM, sel=a, out=AMmux);
    ALU(x=outDreg, y=AMmux, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=ALUout, out=outM, zr=zr, ng=ng);

    // JUMP LOGIC
    Or(a=zr, b=ng, out=npos);
    Not(in=npos, out=pos);

    And(a=j1, b=ng, out=j1o);
    And(a=j2, b=zr, out=j2o);
    And(a=j3, b=pos, out=j3o);

    Or(a=j1o, b=j2o, out=j12o);
    Or(a=j12o, b=j3o, out=jump);

    PC(in=outAreg, load=jump, inc=true, reset=reset, out[0..14]=pc);



}